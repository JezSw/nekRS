
void userf(double time) {
  const dfloat ffx{0.052};

  // Get x component of non-linear momentum array
  // using offset of 0
  auto o_FUx = nrs->o_NLT + 0 * nrs->fieldOffset;
  platform->linAlg->fill(nrs->mesh->Nlocal, ffx, o_FUx);
}

void velocityDirichletConditions(bcData *bc) {
  if(bc->id == 3) {
    bc->u = bc->uinter;
    bc->v = bc->vinter;
    bc->w = bc->winter;
    bc->s = bc->sinter;
  } else {
    bc->u = 0.0;
    bc->v = 0.0;
    bc->w = 0.0;
    bc->s = 0.0;
  }
}

void UDF_Setup() {
  auto mesh = nrs->meshV;

  const dfloat A{4.5}, B{3.5}, C{1./6};

  // mesh modification
  for(int i{0}; i < mesh -> Nlocal; ++i) {
    const dfloat argx{B * (std::abs(mesh->x[i] - A) - B)};
    const dfloat A1{C * (1. + std::tanh(argx))};
    mesh->y[i] = mesh->y[i] + A1 * (3. - mesh->y[i]);
  }

  // initial conditions
  for(int i{0}; i < mesh -> Nlocal; ++i) {
    nrs->U[n + 0 * nrs->fieldOffset] = 1.0;
    nrs->U[n + 1 * nrs->fieldOffset] = 0.0;
    nrs->U[n + 2 * nrs->fieldOffset] = 0.0;
  }

  nrs->userVelocitySource = &userf;
}

void UDF_ExecuteStep(double time, int tstep) {}

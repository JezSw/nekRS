.. _overlapping_overset_grids:

Overlapping Overset Grids
=========================

This tutorial will describe how to run a case with two overlapping meshes (NekNek) from scratch.
We illustrate this by using the :ref:`perhill` case.
If you are not familiar with *NekRS*, we strongly recommend you begin with the periodic hill tutorial first!

The three key steps to running a case with NekNek are: 

  1. Setting up the mesh with appropriate boundary conditions for the overlapping interface.
  2. Specifying parameters to control stability and accuracy for the overlapping-Schwarz iterations.
  3. Modifying ``velocityDirichletConditions`` to read Dirichlet boundary data for the overlapping interfaces.

Pre-processing
..............

The pre-processing steps for a NekNek calculation differ from a mono-domain NekRS calculation only in terms of ensuring that the appropriate boundary condition ``int`` is specified at the overlapping interface.
This boundary condition serves as the flag to let the solver know that Dirichlet data for these boundary conditions must come from interpolation of the data in the overlapping mesh.

Mesh generation
...............

In this tutorial, we generate two meshes to span the entire domain, an upper and a lower mesh. 
The lower mesh is generated by ``genbox`` with the following input file:

.. literalinclude:: overlapping_overset_grids/lower.box
 
and the upper mesh is generated by ``genbox`` with the following input file:

.. literalinclude:: overlapping_overset_grids/upper.box

Note: the lower domain spans :math:`y \in [0,2.5]` and the upper domain spans :math:`y \in [2.25,3]`. We also use ``int`` for the boundary surfaces that overlap the other domain. 

Now the meshes can be generated by running ``genbox`` for each of these cases to obtain ``upper.re2`` and ``lower.re2``.

.. code-block:: console

  $ genbox <<< upper.box
  $ mv box.re2 upper.re2
  $ genbox <<< lower.box
  $ mv box.re2 upper.re2

:Reminder:
  ``genbox`` produces a file named ``box.re2``, so you will need to rename the files between generating the separate parts.

Once we have both upper and lower mesh files, we need to run ``genmap`` for both meshes.

.. code-block:: console

  $ genmap

On input specify ``lower`` as your casename and press enter to use the default tolerance. 
This step will produce ``lower.ma2`` which needs to be generated only once. 
Next do the same for the upper mesh to generate ``upper.ma2``.

User Defined Functions file (.udf)
..................................

As before we need to create a UDF file, to get started create a file ``hillnn.udf`` in the current directory.

Modify mesh and add forcing to the flow
---------------------------------------

As for the mono-domain periodic hill case, we modify the mesh defining a function ``UDF_Setup`` and adding:

.. literalinclude:: overlapping_overset_grids/hillnn.udf
   :language: c++
   :lines: 9-18

.. _fig:hillnn_mesh:

.. figure:: overlapping_overset_grids/hillnn_mesh.png
    :align: center
    :figclass: align-center
    :alt: neknek_mesh

    Modified box mesh graded

Currently, applying a constant mass flux with ``param(54)`` and ``param(55)`` is **not** supported with overlapping overset grids. 
For this case, we drive the flow using a constant acceleration term in ``userf`` and using this within ``UDF_Setup``:


.. literalinclude:: overlapping_overset_grids/hillnn.udf
   :language: c++
